解決方法
1 対 N の場合
つまり先程の例である。この場合コントローラで @articles を取得する際に

@articles = Article.all.includes(:user)
にすると

SELECT 'article'.* FROM 'articles'

SELECT 'users'.* FROM 'users' WHERE 'users'.'id' IN (1, 2)
の2つの SQL が発行されるだけになり、N+1 問題が解決する。


N 対 1 対 N の場合
先程のモデルに加えて、User が Comment も持っている場合。

app/models/user.rb
class User < ActiveRecord::Base
  has_many :articles
  has_many :comments
end
class Comment < ActiveRecord::Base
  belongs_to :user
end
app/views/articles/index.html.haml
- @articles.each do |article|
  = article.title
  = article.user.name
  - article.user.comments.each do |comment|
    = comment.content
上記のコードの時、Article の取得を先程と同じように

@articles = Article.all.includes(:user)
とすると、article.user.comments の user.comments 部分で N+1 問題が起きてしまう。
この場合は

@articles = Article.all.includes(user: :comments)
とすると N+1 問題が解消される。


N 対 1　対 N 対 1 の場合
先程の例に加えて、さらに comment が 1 つのカテゴリに所属している場合(例がくそみたいに悪いですが気にしないでください。)

app/views/articles/index.html.haml
- @articles.each do |article|
  = article.title
  = article.user.name
  - article.user.comments.each do |comment|
    = comment.content
    = comment.category.name
この時は

@articles = Article.all.includes(user: {comments: :category})
で解決する。
またコメントが id が 1 のカテゴリに属しているか調べる場合(あまり使わない)

app/views/articles/index.html.haml
- article.user.comments.where(category_id: 1).present?
このように view で where を使ってしまうと、たとえ Article の取得を

@articles = Article.all.includes(user: {comments: :category})
としていても N+1 問題がおきてしまうので、

@articles = Article.all.includes(user: :comments)
として

- article.user.comments.pluck(:category_id).include?(1)
のようにすると N+1 が解決されるはず。


1 対 複数の N の場合
先程までのモデリングで view が

app/views/users/index.html.haml
- @users.each do |user|
  - user.articles.each do |article|
    = article.title
  - user.comments.each do |comment|
    = comment.content
の場合は、User の取得時に


@users = User.all.includes(:articles, :comments)
とすればよい
